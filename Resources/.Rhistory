library(tidyverse)
demo_table <- read.csv(file='demo.csv',check.names=F,stringsAsFactors = F)
demo_table <- demo_table %>% mutate(Mileage_per_Year=Total_Miles/(2020-Year),IsActive=TRUE) #add columns to original data frame
head(mpg)
colnames(mpg)
plt <- ggplot(mpg,aes(x=class)) #import dataset into ggplot2
plt + geom_bar() #plot a bar plot
?geom_bar()
mpg_summary <- mpg %>% group_by(manufacturer) %>% summarize(Vehicle_Count=n(), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary,aes(x=manufacturer,y=Vehicle_Count)) #import dataset into ggplot2
mpg_summary <- mpg %>% group_by(manufacturer) %>% summarize(Vehicle_Count=n(), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary,aes(x=manufacturer,y=Vehicle_Count)) #import dataset into ggplot2
plt + geom_col() #plot a bar plot
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset") #plot bar plot with labels
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset") + #plot a bar plot with labels
theme(axis.text.x=element_text(angle=45,hjust=1)) #rotate the x-axis label 45 degrees
# compare the differences in average hwy fuel economy b/w Toyota vehicles as a function of cylinder size
# First create a summary table
mpg_summary <- subset(mpg, manufacturer=='toyota') %>% group_by(cyl) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep')
# Create a plot using the new summary table and vectors created (import dataset into ggplot2)
plt <- ggplot(mpg_summary,aes(x=cyl,y=Mean_Hwy))
# Generate the line plot using geom_line()
plt +geom_line()
# Adjust the x-axis and y-axis tick values to more accurately reflect cyl sizes
plt + geom_line() + scale_x_discrete(limits = c(4,6,8)) + scale_y_continuous(breaks = c(16:30))
# create a scatter plot to visualize the relationship b/w car engine size (displ) versus city fuel economy (cty)
# first create a ggplot object by importing the dataset into ggplot2
plt <- ggplot(mpg,aes(x=displ,y=cty))
# then create a scatter plot
plt + geom_point() + xlab('Engine Size (L)') + ylab('City Fuel Efficiency (MPG)')
# Add custom aesthetics to help visualize the relationship b/w city fuel efficiency and engine size
plt <- ggplot(mpg,aes(x=displ,y=cty,color=class)) #import dataset into ggplot2
plt + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class")
# add another aesthetic
plt <- ggplot(mpg,aes(x=displ,y=cty,color=class,shape=drv))
plt + geom_point() + labs(x='Engine Size (L)', y='City Fuel Efficiency (MPG)', color='Vehicle Class', shape='Type of Drive')
# Mod 16.3.5
# Import dataset into ggplot2 & add boxplot
plt <- ggplot(mpg,aes(y=hwy))
plt + geom_boxplot()
# Create a set of boxplots that compares HWY fuel efficiency by manufacturer
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy))
plt + geom_boxplot() + theme(axis.text.x = element_text(angle=45,hjust=1))
# Mod 16.3.6 Heatmap Plots
# Heatmaps are used to look at large trends in a dataset
# Create a summary table
mpg_summary <- mpg %>% group_by(class,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep')
plt <- ggplot(mpg_summary, aes(x=class,y=factor(year),fill=Mean_Hwy))
plt + geom_tile() + labs(x='Vehicle Class',y='Vehicle Year',fill='Mean Highway (MPG)')
# Examine the difference in avg hwy fuel efficiency
# across each model from 1999-2008
mpg_summary <- mpg %>% group_by(model,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep')
plt <- ggplot(mpg_summary, aes(x=model,y=factor(year),fill=Mean_Hwy))
plt + geom_tile() + labs(x='Model',y='Vehicle Year', fill='Mean Highway (MPG)') +
theme(axis.text.x = element_text(angle=90,hjust=1,vjust=.5))
#Mod 16.3.7 Add layers to Plots
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy)) #import dataset into ggplot2
plt + geom_boxplot() + #add boxplot
theme(axis.text.x=element_text(angle=45,hjust=1)) + #rotate x-axis labels 45 degrees
geom_point() #overlay scatter plot on top
# Compare avg eng size for each vehicle class
mpg_summary <- mpg %>% group_by(class) %>% summarize(Mean_Engine=mean(displ), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary,aes(x=class,y=Mean_Engine)) #import dataset into ggplot2
plt + geom_point(size=4) + labs(x="Vehicle Class",y="Mean Engine Size") #add scatter plot
# Provide context aroudn the stddev
mpg_summary <- mpg %>% group_by(class) %>% summarize(Mean_Engine=mean(displ),SD_Engine=sd(displ), .groups = 'keep')
plt <- ggplot(mpg_summary,aes(x=class,y=Mean_Engine)) #import dataset into ggplot2
plt + geom_point(size=4) + labs(x="Vehicle Class",y="Mean Engine Size") + #add scatter plot with labels
geom_errorbar(aes(ymin=Mean_Engine-SD_Engine,ymax=Mean_Engine+SD_Engine)) #overlay with error bars
# Facet to avoid visualizing all data within a single plot
# convert to long format
mpg_long <- mpg %>% gather(key='MPG_Type',value='Rating', c(cty,hwy))
head(mpg_long)
# Visualize the different vehicle fuel efficiency ratings by manufacturer
plt <- ggplot(mpg_long,aes(x=manufacturer,y=Rating,color=MPG_Type))
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1))
# facet mpg_long by fuel-efficiency type
plt + geom_boxplot() + facet_wrap(vars(MPG_Type)) +
theme(axis.text.x = element_text(angle=45,hjust=1),legend.position = 'none') +
xlab('Manufacturer')
#16.4.4 Test for Normality
# Test the distribution of vehicle weights
ggplot(mtcars,aes(x=wt)) + geom_density()
# A Shapiiro test. The further p is from zero (>.05)
# more normally distributed the data
shapiro.test(mtcars$wt)
?sample_n()
setwd("C:/Users/scott/mod_16")
# 16.7.2 Return to Linear Regression (y=mx +b)
# where y is the dependent variable, m is the slope
# x is the independent variable, and b is the y intercept
lm(qsec ~ hp,mtcars) # create a linear model
summary(lm(qsec ~ hp,mtcars))
# plot the data linear model over the data!
model <- lm(qsec ~ hp,mtcars) #create linear model
yvals <- model$coefficients['hp']*mtcars$hp +
model$coefficients['(Intercept)'] #determine y-axis values from linear model
plt <- ggplot(mtcars,aes(x=hp,y=qsec))
plt + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
library(tidyverse)
demo_table <- read.csv(file='demo.csv',check.names=F,stringsAsFactors = F)
demo_table <- demo_table %>% mutate(Mileage_per_Year=Total_Miles/(2020-Year),IsActive=TRUE) #add columns to original data frame
mpg_summary <- mpg %>% group_by(manufacturer) %>% summarize(Vehicle_Count=n(), .groups = 'keep') #create summary table
mpg_summary <- mpg %>% group_by(manufacturer) %>% summarize(Vehicle_Count=n(), .groups = 'keep') #create summary table
# compare the differences in average hwy fuel economy b/w Toyota vehicles as a function of cylinder size
# First create a summary table
mpg_summary <- subset(mpg, manufacturer=='toyota') %>% group_by(cyl) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep')
# Mod 16.3.6 Heatmap Plots
# Heatmaps are used to look at large trends in a dataset
# Create a summary table
mpg_summary <- mpg %>% group_by(class,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep')
# Examine the difference in avg hwy fuel efficiency
# across each model from 1999-2008
mpg_summary <- mpg %>% group_by(model,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep')
# Compare avg eng size for each vehicle class
mpg_summary <- mpg %>% group_by(class) %>% summarize(Mean_Engine=mean(displ), .groups = 'keep') #create summary table
# Provide context aroudn the stddev
mpg_summary <- mpg %>% group_by(class) %>% summarize(Mean_Engine=mean(displ),SD_Engine=sd(displ), .groups = 'keep')
l
# Facet to avoid visualizing all data within a single plot
# convert to long format
mpg_long <- mpg %>% gather(key='MPG_Type',value='Rating', c(cty,hwy))
head(mpg_long)
#16.4.4 Test for Normality
# Test the distribution of vehicle weights
ggplot(mtcars,aes(x=wt)) + geom_density()
# A Shapiiro test. The further p is from zero (>.05)
# more normally distributed the data
shapiro.test(mtcars$wt)
#16.6.1 Sample vs. Population
# Visualize the distribution of driven miles for the
# entire population dataset using geom_density()
population_table <- read.csv('used_car_data.csv', check.names = F,stringsAsFactors = F)
# Create a sample dataset using sample_n()
# randomly sample 50 data points
sample_table <- population_table %>% sample_n(50) #randomly sample 50 data points
#16.6.2
# Test if the miles driven from previous sample set
# is statistically different from miles driven in
# population data using t.test()
t.test(log10(sample_table$Miles_Driven),mu=mean(log10(population_table$Miles_Driven)))
#16.6.3
# Test whether the mean miles driven of two samples are
# statistically different
sample_table <- population_table %>% sample_n(50)
sample_table2 <- population_table %>% sample_n(50)
t.test(log10(sample_table$Miles_Driven),log10(sample_table2$Miles_Driven))
#16.6.4
mpg_data <- read.csv('mpg_modified.csv')
mpg_1999 <- mpg_data %>% filter(year==1999)
mpg_2008 <- mpg_data %>% filter(year==2008)
t.test(mpg_1999$hwy,mpg_2008$hwy,paired = T)
#16.6.5 Anova Test
# clean the data and then determine the stat diff in the
# hp of a vehicle based on engine type
mtcars_filt <- mtcars[,c('hp','cyl')]
mtcars_filt$cyl <- factor(mtcars_filt$cyl)
aov(hp ~ cyl,data=mtcars_filt)
summary(aov(hp ~ cyl,data=mtcars_filt))
cor(mtcars$hp,mtcars$qsec)
#Used the used cars dataset to see if the correlation
# also exists
used_cars <- read.csv('used_car_data.csv',stringsAsFactors = F)
View(plt)
# Produce a correlation matrix for the dataset
used_matrix <- as.matrix(used_cars[,c('Selling_Price','Present_Price','Miles_Driven')])
cor(used_matrix)
# 16.7.2 Return to Linear Regression (y=mx +b)
# where y is the dependent variable, m is the slope
# x is the independent variable, and b is the y intercept
lm(qsec ~ hp,mtcars) # create a linear model
summary(lm(qsec ~ hp,mtcars))
# plot the data linear model over the data!
model <- lm(qsec ~ hp,mtcars) #create linear model
yvals <- model$coefficients['hp']*mtcars$hp +
model$coefficients['(Intercept)'] #determine y-axis values from linear model
plt <- ggplot(mtcars,aes(x=hp,y=qsec))
plt + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
lm(qsec ~ mpg + disp + drat + wt +hp,data = mtcars)
# 16.7.3 Multiple Linear Regression
# generate multiple linear regression model
lm(qsec ~ mpg + disp + drat + wt +hp,data = mtcars)
# 16.7.3 Multiple Linear Regression
# generate multiple linear regression model
lm(qsec ~ mpg + disp + drat + wt +hp,data = mtcars)
# obtain statistical metrics
summary(lm(qsec ~ mpg + disp + drat + wt +hp,data = mtcars))
# 16.8.1 Category Complexities
# Test whether there is a statistical difference in the
# distributions of veh class across the 1999 and 2008
# mpg dataset. First build a contingency table
table(mpg$class,mpg$year)
# Pass the cont. table to the chisq.test() function
tbl <- table(mpg$class,mpg$year)
chisq.test(tbl)
?chisq.test()
setwd("C:/Users/scott/MechaCar_Statistical_Analysis/Resources")
# Load the dplyr package
library(dplyr)
# Import and read the csv into a dataframe
cardata <- read.csv(file = 'MechaCar_mpg.csv',check.names=F,stringsAsFactors = F)
# Perform linear regression
lm(qsec ~ vehicle_length + vehicle_weight + spoiler_angle +
ground_clearance + AWD + mpg,data = cardata)
# 16.7.3 Multiple Linear Regression
# generate multiple linear regression model
lm(cardata ~ mpg + disp + drat + wt +hp,data = mtcars)
# Perform linear regression
lm(cardata ~ vehicle_length + vehicle_weight + spoiler_angle +
ground_clearance + AWD + mpg,data = cardata)
# Perform linear regression
lm(cardata ~ vehicle_length+vehicle_weight+spoiler_angle+
ground_clearance+AWD+mpg, data = cardata)
# Import and read the csv into a dataframe
mpg<- read.csv('MechaCar_mpg.csv', stringsAsFactors = F)
# Import and read the csv into a dataframe
mpg<- read.csv('MechaCar_mpg.csv', stringsAsFactors = F)
# Perform linear regression
lm(mpg ~ vehicle_length+vehicle_weight+spoiler_angle+ground_clearance+AWD, data=mpg)
# Use the summary function to determine p-value & r-squared
summary(lm(mpg ~ vehicle_length+vehicle_weight+spoiler_angle+ground_clearance+AWD, data=mpg))
setwd("C:/Users/scott/MechaCar_Statistical_Analysis/Resources")
# Part 2
# Create a summary statistics table to show:
# suspension coil PSI continuous variable across all lots
# PSI mean, median, variance, and std dev
# IMport and read the csv into a dataframe
coil <- read.csv('Suspension_Coil.csv', stringsAsFactors = F)
