library(tidyverse)
demo_table <- read.csv(file='demo.csv',check.names=F,stringsAsFactors = F)
demo_table <- demo_table %>% mutate(Mileage_per_Year=Total_Miles/(2020-Year),IsActive=TRUE) #add columns to original data frame
head(mpg)
colnames(mpg)
plt <- ggplot(mpg,aes(x=class)) #import dataset into ggplot2
plt + geom_bar() #plot a bar plot
?geom_bar()
mpg_summary <- mpg %>% group_by(manufacturer) %>% summarize(Vehicle_Count=n(), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary,aes(x=manufacturer,y=Vehicle_Count)) #import dataset into ggplot2
mpg_summary <- mpg %>% group_by(manufacturer) %>% summarize(Vehicle_Count=n(), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary,aes(x=manufacturer,y=Vehicle_Count)) #import dataset into ggplot2
plt + geom_col() #plot a bar plot
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset") #plot bar plot with labels
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset") + #plot a bar plot with labels
theme(axis.text.x=element_text(angle=45,hjust=1)) #rotate the x-axis label 45 degrees
# compare the differences in average hwy fuel economy b/w Toyota vehicles as a function of cylinder size
# First create a summary table
mpg_summary <- subset(mpg, manufacturer=='toyota') %>% group_by(cyl) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep')
# Create a plot using the new summary table and vectors created (import dataset into ggplot2)
plt <- ggplot(mpg_summary,aes(x=cyl,y=Mean_Hwy))
# Generate the line plot using geom_line()
plt +geom_line()
# Adjust the x-axis and y-axis tick values to more accurately reflect cyl sizes
plt + geom_line() + scale_x_discrete(limits = c(4,6,8)) + scale_y_continuous(breaks = c(16:30))
# create a scatter plot to visualize the relationship b/w car engine size (displ) versus city fuel economy (cty)
# first create a ggplot object by importing the dataset into ggplot2
plt <- ggplot(mpg,aes(x=displ,y=cty))
# then create a scatter plot
plt + geom_point() + xlab('Engine Size (L)') + ylab('City Fuel Efficiency (MPG)')
# Add custom aesthetics to help visualize the relationship b/w city fuel efficiency and engine size
plt <- ggplot(mpg,aes(x=displ,y=cty,color=class)) #import dataset into ggplot2
plt + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class")
# add another aesthetic
plt <- ggplot(mpg,aes(x=displ,y=cty,color=class,shape=drv))
plt + geom_point() + labs(x='Engine Size (L)', y='City Fuel Efficiency (MPG)', color='Vehicle Class', shape='Type of Drive')
# Mod 16.3.5
# Import dataset into ggplot2 & add boxplot
plt <- ggplot(mpg,aes(y=hwy))
plt + geom_boxplot()
# Create a set of boxplots that compares HWY fuel efficiency by manufacturer
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy))
plt + geom_boxplot() + theme(axis.text.x = element_text(angle=45,hjust=1))
# Mod 16.3.6 Heatmap Plots
# Heatmaps are used to look at large trends in a dataset
# Create a summary table
mpg_summary <- mpg %>% group_by(class,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep')
plt <- ggplot(mpg_summary, aes(x=class,y=factor(year),fill=Mean_Hwy))
plt + geom_tile() + labs(x='Vehicle Class',y='Vehicle Year',fill='Mean Highway (MPG)')
# Examine the difference in avg hwy fuel efficiency
# across each model from 1999-2008
mpg_summary <- mpg %>% group_by(model,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep')
plt <- ggplot(mpg_summary, aes(x=model,y=factor(year),fill=Mean_Hwy))
plt + geom_tile() + labs(x='Model',y='Vehicle Year', fill='Mean Highway (MPG)') +
theme(axis.text.x = element_text(angle=90,hjust=1,vjust=.5))
#Mod 16.3.7 Add layers to Plots
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy)) #import dataset into ggplot2
plt + geom_boxplot() + #add boxplot
theme(axis.text.x=element_text(angle=45,hjust=1)) + #rotate x-axis labels 45 degrees
geom_point() #overlay scatter plot on top
# Compare avg eng size for each vehicle class
mpg_summary <- mpg %>% group_by(class) %>% summarize(Mean_Engine=mean(displ), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary,aes(x=class,y=Mean_Engine)) #import dataset into ggplot2
plt + geom_point(size=4) + labs(x="Vehicle Class",y="Mean Engine Size") #add scatter plot
# Provide context aroudn the stddev
mpg_summary <- mpg %>% group_by(class) %>% summarize(Mean_Engine=mean(displ),SD_Engine=sd(displ), .groups = 'keep')
plt <- ggplot(mpg_summary,aes(x=class,y=Mean_Engine)) #import dataset into ggplot2
plt + geom_point(size=4) + labs(x="Vehicle Class",y="Mean Engine Size") + #add scatter plot with labels
geom_errorbar(aes(ymin=Mean_Engine-SD_Engine,ymax=Mean_Engine+SD_Engine)) #overlay with error bars
# Facet to avoid visualizing all data within a single plot
# convert to long format
mpg_long <- mpg %>% gather(key='MPG_Type',value='Rating', c(cty,hwy))
head(mpg_long)
# Visualize the different vehicle fuel efficiency ratings by manufacturer
plt <- ggplot(mpg_long,aes(x=manufacturer,y=Rating,color=MPG_Type))
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1))
# facet mpg_long by fuel-efficiency type
plt + geom_boxplot() + facet_wrap(vars(MPG_Type)) +
theme(axis.text.x = element_text(angle=45,hjust=1),legend.position = 'none') +
xlab('Manufacturer')
#16.4.4 Test for Normality
# Test the distribution of vehicle weights
ggplot(mtcars,aes(x=wt)) + geom_density()
# A Shapiiro test. The further p is from zero (>.05)
# more normally distributed the data
shapiro.test(mtcars$wt)
?sample_n()
setwd("C:/Users/scott/MechaCar_Statistical_Analysis/Resources")
# Part 2
# Create a summary statistics table to show:
# suspension coil PSI continuous variable across all lots
# PSI mean, median, variance, and std dev
# Import and read the csv into a dataframe
coil <- read.csv('Suspension_Coil.csv', stringsAsFactors = F)
# Create summary dataframe
total_summary <- summarize(coil)
# Part 1
# Load the dplyr package
library(dplyr)
# Create summary dataframe
total_summary <- summarize(coil)
View(total_summary)
# Create summary dataframe
summarize(coil)
# Part 2
# Create a summary statistics table to show:
# suspension coil PSI continuous variable across all lots
# PSI mean, median, variance, and std dev
# Import and read the csv into a dataframe
coil <- read.csv('Suspension_Coil.csv', stringsAsFactors = F)
# Create summary dataframe
summarize(coil)
# Part 2
# Create a summary statistics table to show:
# suspension coil PSI continuous variable across all lots
# PSI mean, median, variance, and std dev
# Import and read the csv into a dataframe
coil <- read.csv('Suspension_Coil.csv')
View(coil)
# Create summary dataframe
summarize(coil)
head(coil)
# Create summary dataframe
total_summary <- coil %>% summarize(Mean=mean(PSI), Median=median(PSI),
Variance=var(PSI), SD=sd(PSI), .groups='keep')
View(total_summary)
# Create a lot_summary dataframe using group_by and summarize()
lot_summary <- coil %>% group_by(Manufacturing_Lot) %>% summarize(Mean=mean(PSI),
Median=median(PSI),
Variance=var(PSI),
SD=sd(PSI),
Vehicles=n(),
.groups='keep')
View(lot_summary)
# Create a lot_summary dataframe using group_by and summarize()
lot_summary <- coil %>% group_by(Manufacturing_Lot) %>%
summarize(Mean=mean(PSI),
Median=median(PSI),
Variance=var(PSI),
SD=sd(PSI),
.groups='keep')
View(total_summary)
# Part 3
# perform t-tests to determine if all manufacturing lots and each lot
# individually are statistically different from the population mean of
# 1,500 pounds per square inch.
t.test((coil$PSI), mu=1500)
lot3<-coil %>% filter(Manufacturing_Lot == 'Lot3')
# Use t.test() and subset() to determine statistical
# difference of PSI per lot based on 1500 PSI mean
lot1<-coil %>% filter(Manufacturing_Lot == 'Lot1')
lot2<-coil %>% filter(Manufacturing_Lot == 'Lot2')
lot3<-coil %>% filter(Manufacturing_Lot == 'Lot3')
View(lot1)
View(lot2)
View(lot3)
# t.test each subset (lot1-3)
t.test(lot1$PSI,mu=1500)
t.test(lot2$PSI, mu=1500)
t.test(lot3$PSI, mu=1500)
View(total_summary)
# Import and read the csv into a dataframe
mpg<- read.csv('MechaCar_mpg.csv', stringsAsFactors = F)
View(mpg)
View(coil)
View(mpg_long)
# Perform linear regression
lm(mpg ~ vehicle_length+vehicle_weight+spoiler_angle+ground_clearance+AWD, data=mpg)
# Use the summary function to determine p-value & r-squared
summary(lm(mpg ~ vehicle_length+vehicle_weight+spoiler_angle+ground_clearance+AWD, data=mpg))
View(mpg_summary)
View(mpg)
